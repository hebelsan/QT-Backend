#include "fpaudi.h"
#include <Qt>
#include <QDebug>
#include <QDateTime>

FPAudi::FPAudi() : FrameParser(nullptr)
{

}
void FPAudi::dasboardFrame(QCanBusFrame &frame){
    // menu right released
    if (frame.payload().at(0) == 0x02 && frame.payload().at(1) == 0x01){
        emit FrameParser::dashboardMenuRightFrameReceived();
    }
    // menu left released
    else if (frame.payload().at(0) == 0x03 && frame.payload().at(1) == 0x01){
        emit FrameParser::dashboardMenuRightFrameReceived();
    }
    // roller up released
    else if (frame.payload().at(0) == 0x06 && frame.payload().at(1) == 0x01){
        emit FrameParser::dashboardRollerUpFrameReceived();
    }
    // roller down released
    else if (frame.payload().at(0) == 0x06 && frame.payload().at(1) == 0x0F){
        emit FrameParser::dashboardRollerDownFrameReceived();
    }
    // roller pressed
    else if (frame.payload().at(0) == 0x07 && frame.payload().at(1) == 0x01){
        emit FrameParser::dashboardRollerPressedFrameReceived();
    }
}

void FPAudi::x501Frame(QCanBusFrame &frame){
    emit FrameParser::speedFrameReceived(QChar(frame.payload().at(1)).unicode() * 2.65f);
    emit FrameParser::rpmFrameReceived(QChar(frame.payload().at(3)).unicode() * 62.5f);
    emit FrameParser::rangeFrameReceived(QChar(frame.payload().at(5)).unicode() * 10.0f);

    /*
     * 8/8	4F	79
     * 7/8	5F	95
     * 6/8	6F	111
     * 5/8	7F	127
     * 4/8	9F	159
     * 3/8	AF	175
     * 2/8	BF	191
     * 1/8	DF	223
     * 0/8  CF
    */

    emit FrameParser::fuelFrameReceived(100.0f - ((QChar((frame.payload().at(4) & 0xF0) >> 4).unicode() - 4) * (100.f / 9.0f)));
    emit FrameParser::gearFrameReceived(QChar(frame.payload().at(6)).unicode());

}

void FPAudi::receiveCANFrame(QCanBusFrame frame){
    //qInfo() << "frame with " << frame.timeStamp().microSeconds() << " at " <<  QDateTime::currentMSecsSinceEpoch();
    const qint32 id = frame.frameId();

    if (id == 0x42B){
        if (frame.payload().at(0) == 0x10 && frame.payload().at(1) == 0x10){
            emit FrameParser::turnSignalOnFrameReceived(Qt::LeftArrow);
        }
        else if (frame.payload().at(0) == 0x01 && frame.payload().at(1) == 0x01){
            emit FrameParser::turnSignalOnFrameReceived(Qt::RightArrow);
        }
        else if (frame.payload().at(0) == 0x00 && frame.payload().at(1) == 0x00){
            emit FrameParser::turnSignalOffFrameReceived();
        }
    }

    if (id == 0x50F){
        dasboardFrame(frame);
    }
    if (id == 0x501){
        x501Frame(frame);
    }
    //cruse control
    if (id == 0x501) {
        int speed = QChar(frame.payload().at(1)).unicode();
        if (frame.payload().at(0) == 0x0){
            emit FrameParser::cruiseControlFrameReceived(CruseControl::Off, speed);
        }
        else if (frame.payload().at(0) == 0x1){
            emit FrameParser::cruiseControlFrameReceived(CruseControl::On, speed);
        }
        else if (frame.payload().at(0) == 0x2){
            emit FrameParser::cruiseControlFrameReceived(CruseControl::GreenCar, speed);
        }
        else if (frame.payload().at(0) == 0x3){
            emit FrameParser::cruiseControlFrameReceived(CruseControl::GreenCarDistanz, speed);
        }
    }
    // warnings
    else if (id == 0x50A) {
         emit FrameParser::warningFrameReceived(QChar(frame.payload().at(0)).unicode());
    }
    // 0x7F0 button events
    else if  (id == 0x7F0){
        int p2 = QChar(frame.payload().at(2)).unicode();
        // volumne
        if (frame.payload().at(0) == 0x23 && frame.payload().at(1) == 0x01){
            if (p2 == 0x01){
                emit FrameParser::volumeUpFrameReceived();
            } else if (p2 == 0xFF) {
                emit FrameParser::volumeDownFrameReceived();
            }
        }
        // thumbwheel
        if (frame.payload().at(0) == 0x23 && frame.payload().at(1) == 0x02){
            if (p2 == 0x01){
                emit FrameParser::thumbwheelRightDownFrameReceived();
            } else if (p2 == 0xFF) {
                emit FrameParser::thumbwheelLeftUpFrameReceived();
            }
        }
        // navigation button
        else if (frame.payload().at(0) == 0x35 && frame.payload().at(1) == 0x05) {
            if (p2 == 0x01){
                emit FrameParser::navigationButtonPressedFrameReceived();
            } else if (p2 == 0x00) {
                emit FrameParser::navigationButtonReleasedFrameReceived();
            }
        }
        // phone button
        else if (frame.payload().at(0) == 0x35 && frame.payload().at(1) == 0x04) {
            if (p2 == 0x01){
                emit FrameParser::phoneButtonPressedFrameReceived();
            } else if (p2 == 0x00) {
                emit FrameParser::phoneButtonReleasedFrameReceived();
            }
        }
        // radio button
        else if (frame.payload().at(0) == 0x35 && frame.payload().at(1) == 0x18) {
            if (p2 == 0x01){
                emit FrameParser::radioButtonPressedFrameReceived();
            } else if (p2 == 0x00) {
                emit FrameParser::radioButtonReleasedFrameReceived();
            }
        }
        // media button
        else if (frame.payload().at(0) == 0x35 && frame.payload().at(1) == 0x02) {
            if (p2 == 0x01){
                emit FrameParser::mediaButtonPressedFrameReceived();
            } else if (p2 == 0x00) {
                emit FrameParser::mediaButtonReleasedFrameReceived();
            }
        }
        // menu button
        else if (frame.payload().at(0) == 0x35 && frame.payload().at(1) == 0x1A) {
            if (p2 == 0x01){
                emit FrameParser::menuButtonPressedFrameReceived();
            } else if (p2 == 0x00) {
                emit FrameParser::menuButtonReleasedFrameReceived();
            }
        }
    }



}
