import QtQuick 2.7
import QtQuick.Controls.Styles 1.4
import QtLocation 5.5

Item{
    id: hfuInfoLeft
    width: parent.width*0.9
    height: parent.height
    //anchors.verticalCenter: parent.verticalCenter
    //anchors.horizontalCenter: parent.horizontalCenter
    //color: "black"
    Item{
        id:temp
        width: parent.width/2*0.9
        height: parent.height
        anchors.horizontalCenter: parent.horizontalCenter
        //border.color: "white"
        //color: "black"
        Image{
            width: parent.width
            height: parent.height
            fillMode: Image.PreserveAspectFit
            anchors.horizontalCenter: parent.horizontalCenter
            source: "bilder/Temp.png"
        }

        Canvas{
            id: temp_gauge

            property real maxVal: 100
            property real minVal: 0

            property real value: canEventSink.temperature
            property real leftOffset: 0//temp.width*0.1
            property real rightOffset: parent.width//temp.width*0.9

            property real distanceOfVal: value/maxVal*(rightOffset-leftOffset)
            property color colorTemp:{
                if (value>=80){
                    return "red"
                }
                else{
                    return "white"
                }
            }

            width: temp.width
            height: temp.height
            contextType: qsTr("2D")

            onMinValChanged: requestPaint()
            onMaxValChanged: requestPaint()
            onValueChanged: requestPaint()

            onPaint: {

                var ctx = getContext("2d");
                ctx.save();

                ctx.clearRect(0, 0, width, height);

                /*ctx.beginPath();
                ctx.lineWidth = 20;
                ctx.strokeStyle = "green";
                ctx.moveTo(leftOffset, temp.height/2);
                ctx.lineTo(rightOffset, temp.height/2);
                ctx.stroke();*/

                ctx.beginPath();
                ctx.lineWidth = 28;
                ctx.strokeStyle = colorTemp;
                ctx.moveTo(leftOffset, temp.height/2);
                ctx.lineTo(leftOffset + distanceOfVal, temp.height/2);
                ctx.stroke();

                ctx.restore();

            }

        }


    }
   Item{
        id:fuel
        //border.color: "white"
        width: parent.width/2*0.9
        anchors.top: temp.bottom
        anchors.topMargin: 10
        anchors.horizontalCenter: parent.horizontalCenter
        height: parent.height
        //anchors.right: parent.right
        //anchors.rightMargin: 0

        //color: "black"
        Image{
            width: parent.width
            height: parent.height
            fillMode: Image.Stretch
            source: "bilder/Fuel.png"
        }
        Canvas{
            id: fuel_gauge

            property real maxVal: 100
            property real minVal: 0

            property real value: canEventSink.fuel*100
            property real leftOffset: 0//fuel.width*0.1
            property real rightOffset: fuel.width//fuel.width*0.9

            property real distanceOfVal: value/maxVal*(rightOffset-leftOffset)
            property color colorFuel:{
                if (value<=20){
                    return "red"
                }
                else{
                    return "white"
                }
            }

            width: fuel.width
            height: fuel.height
            contextType: qsTr("2D")

            onMinValChanged: requestPaint()
            onMaxValChanged: requestPaint()
            onValueChanged: requestPaint()

            onPaint: {

                var ctx = getContext("2d");
                ctx.save();

                ctx.clearRect(0, 0, width, height);

                /*ctx.beginPath();
                ctx.lineWidth = 20;
                ctx.strokeStyle = "green";
                ctx.moveTo(leftOffset, fuel.height/2);
                ctx.lineTo(rightOffset, fuel.height/2);
                ctx.stroke();*/

                ctx.beginPath();
                ctx.lineWidth = 28;
                ctx.strokeStyle = colorFuel;
                ctx.moveTo(leftOffset, fuel.height/2);
                ctx.lineTo(leftOffset + distanceOfVal, fuel.height/2);
                ctx.stroke();

                ctx.restore();

            }

        }


    }
}
