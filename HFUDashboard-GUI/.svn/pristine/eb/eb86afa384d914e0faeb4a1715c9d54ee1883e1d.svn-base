import QtQuick 2.7
import QtQuick.Controls.Styles 1.4
import QtLocation 5.5

Item{
    id: hfuInfoLeft
    width: parent.width*0.9
    height: parent.height

    property string src1: canEventSink.warningSrc1
    property string src2: canEventSink.warningSrc2
    property string src3: canEventSink.warningSrc3
    property string src4: canEventSink.warningSrc4
    property string src5: canEventSink.warningSrc5
    property string src6: canEventSink.warningSrc6
    property string src7: canEventSink.warningSrc7
    property string src8: canEventSink.warningSrc8
    property string src9: canEventSink.warningSrc9



    Image{
        width:parent.width
        height: parent.height
        source: "bilder/InfoLeft.png"
        Text{
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.top:parent.top
            anchors.topMargin: 162
            text: "Reichweite 1000km"
            horizontalAlignment: Text.AlignHCenter
            color: Qt.rgba(0,0.55,1,1)
            font.pointSize: 16
        }

        Grid {
            id: warningsGrid
            //height: 190
            //anchors.horizontalCenterOffset: 0
            anchors.horizontalCenter: parent.horizontalCenter
            anchors.verticalCenter: parent.verticalCenter
            anchors.verticalCenterOffset: 30
            anchors.horizontalCenterOffset: 5
            columns: 3
            columnSpacing: 7
            spacing: 7

            property color rectangleColor: "#161616"



            Image{
                id: warning1
                width:71;
                height: 65
                source: src1
            }
            Image{
                id: warning2
                width:71;
                height: 65
                source: src2
            }
            Image{
                id: warning3
                width:71;
                height: 65
                source: src3
            }
            Image{
                id: warning4
                width:71;
                height: 65
                source: src4
            }
            Image{
                id: warning5
                width:71;
                height: 65
                source: src5
            }
            Image{
                id: warning6
                width:71;
                height: 65
                source: src6
            }
            Image{
                id: warning7
                width:71;
                height: 65
                source: src7
            }
            Image{
                id: warning8
                width:71;
                height: 65
                source: src8
            }
            Image{
                id: warning9
                width:71;
                height: 65
                source: src9
            }
        }

        Canvas{
            id: temp_gauge

            property real maxVal: 100
            property real minVal: 0

            property real value: canEventSink.temperature
            property real leftOffset: parent.width*0.085//temp.width*0.1
            property real rightOffset: parent.width*0.915//temp.width*0.9

            property real distanceOfVal: value/maxVal*(rightOffset-leftOffset)
            property color colorTemp:{
                if (value>=80){
                    return "red"
                }
                else{
                    return Qt.rgba(0,0.55,1,1);
                }
            }

            width: parent.width
            height: parent.height
            contextType: qsTr("2D")

            onMinValChanged: requestPaint()
            onMaxValChanged: requestPaint()
            onValueChanged: requestPaint()

            onPaint: {

                var ctx = getContext("2d");
                ctx.save();

                ctx.clearRect(0, 0, width, height);

                /*ctx.beginPath();
                ctx.lineWidth = 20;
                ctx.strokeStyle = "green";
                ctx.moveTo(leftOffset, temp.height/2);
                ctx.lineTo(rightOffset, temp.height/2);
                ctx.stroke();*/

                ctx.beginPath();
                ctx.lineWidth = 37;
                ctx.strokeStyle = colorTemp;
                ctx.moveTo(leftOffset, parent.height*0.8625);
                ctx.lineTo(leftOffset + distanceOfVal, parent.height*0.8625);
                ctx.stroke();

                ctx.restore();

            }

        }
        Canvas{
            id: fuel_gauge

            property real maxVal: 100
            property real minVal: 0

            property real value: canEventSink.fuel// * 100
            property real leftOffset: parent.width*0.08//temp.width*0.1
            property real rightOffset: parent.width*0.91//temp.width*0.9

            property real distanceOfVal: value/maxVal*(rightOffset-leftOffset)
            property color colorFuel:{
                if (value<=20){
                    return "red"
                }
                else{
                    return Qt.rgba(0,0.55,1,1);
                }
            }

            width: parent.width
            height: parent.height
            contextType: qsTr("2D")

            onMinValChanged: requestPaint()
            onMaxValChanged: requestPaint()
            onValueChanged: requestPaint()

            onPaint: {

                var ctx = getContext("2d");
                ctx.save();

                ctx.clearRect(0, 0, width, height);

                /*ctx.beginPath();
                ctx.lineWidth = 20;
                ctx.strokeStyle = "green";
                ctx.moveTo(leftOffset, temp.height/2);
                ctx.lineTo(rightOffset, temp.height/2);
                ctx.stroke();*/

                ctx.beginPath();
                ctx.lineWidth = 37;
                ctx.strokeStyle = colorFuel;
                ctx.moveTo(leftOffset, parent.height*0.2475);
                ctx.lineTo(leftOffset + distanceOfVal, parent.height*0.2475);
                ctx.stroke();

                ctx.restore();

            }

        }

    }

}
